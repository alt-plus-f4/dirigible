openapi: 3.0.3
info:
  title: Sales Order Application - OpenAPI 3.0
  version: 1.0.0
  description: Managing sales orders
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts
tags:
  - name: Country
  - name: Country
  - name: Customer
  - name: Customer
  - name: Product
  - name: UoM
  - name: SalesOrder
  - name: SalesOrder
  - name: SalesOrder
paths:
  /sales-order-app/gen/sales-order/api/Country/CountryService.ts:
    get:
      summary: List Country
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Country
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CountryService.ts/{id}:
    get:
      summary: Get Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Country by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CountryService.ts/count:
    get:
      summary: Count the number of Country
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Country by CountryFilterOptions
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CountryService.ts/search:
    post:
      summary: Search Country by CountryFilterOptions
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Country'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CityService.ts:
    get:
      summary: List City
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/City'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create City
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CityService.ts/{id}:
    get:
      summary: Get City by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/City'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update City by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete City by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Country
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CityService.ts/count:
    get:
      summary: Count the number of City
      tags:
        - Country
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of City by CityFilterOptions
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Country/CityService.ts/search:
    post:
      summary: Search City by CityFilterOptions
      tags:
        - Country
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/City'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerService.ts:
    get:
      summary: List Customer
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Customer
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerService.ts/{id}:
    get:
      summary: Get Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Customer by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerService.ts/count:
    get:
      summary: Count the number of Customer
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Customer by CustomerFilterOptions
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Address: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Address: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerService.ts/search:
    post:
      summary: Search Customer by CustomerFilterOptions
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                      Address: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
                      Address: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Customer'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerPaymentService.ts:
    get:
      summary: List CustomerPayment
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create CustomerPayment
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPayment'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerPaymentService.ts/{id}:
    get:
      summary: Get CustomerPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerPayment'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update CustomerPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPayment'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete CustomerPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Customer
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerPaymentService.ts/count:
    get:
      summary: Count the number of CustomerPayment
      tags:
        - Customer
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of CustomerPayment by CustomerPaymentFilterOptions
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPaymentFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Customer/CustomerPaymentService.ts/search:
    post:
      summary: Search CustomerPayment by CustomerPaymentFilterOptions
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPaymentFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/CustomerPayment'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Product/ProductService.ts:
    get:
      summary: List Product
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Product
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Product
      tags:
        - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Product/ProductService.ts/{id}:
    get:
      summary: Get Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Product
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Product by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Product
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Product/ProductService.ts/count:
    get:
      summary: Count the number of Product
      tags:
        - Product
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Product by ProductFilterOptions
      tags:
        - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/Product/ProductService.ts/search:
    post:
      summary: Search Product by ProductFilterOptions
      tags:
        - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Product'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/UoM/UoMService.ts:
    get:
      summary: List UoM
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - UoM
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/UoM'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create UoM
      tags:
        - UoM
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UoM'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UoM'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/UoM/UoMService.ts/{id}:
    get:
      summary: Get UoM by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - UoM
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/UoM'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update UoM by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - UoM
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UoM'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UoM'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete UoM by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - UoM
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/UoM/UoMService.ts/count:
    get:
      summary: Count the number of UoM
      tags:
        - UoM
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of UoM by UoMFilterOptions
      tags:
        - UoM
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UoMFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/UoM/UoMService.ts/search:
    post:
      summary: Search UoM by UoMFilterOptions
      tags:
        - UoM
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UoMFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/UoM'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderService.ts:
    get:
      summary: List SalesOrder
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrder
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrder'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderService.ts/{id}:
    get:
      summary: Get SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrder'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrder'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrder by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderService.ts/count:
    get:
      summary: Count the number of SalesOrder
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrder by SalesOrderFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderService.ts/search:
    post:
      summary: Search SalesOrder by SalesOrderFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrder'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderItemService.ts:
    get:
      summary: List SalesOrderItem
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderItem
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItem'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderItemService.ts/{id}:
    get:
      summary: Get SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItem'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderItem'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderItem by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderItemService.ts/count:
    get:
      summary: Count the number of SalesOrderItem
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderItem by SalesOrderItemFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderItemService.ts/search:
    post:
      summary: Search SalesOrderItem by SalesOrderItemFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderItemFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderItem'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderPaymentService.ts:
    get:
      summary: List SalesOrderPayment
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create SalesOrderPayment
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPayment'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderPaymentService.ts/{id}:
    get:
      summary: Get SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPayment'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesOrderPayment'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete SalesOrderPayment by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - SalesOrder
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderPaymentService.ts/count:
    get:
      summary: Count the number of SalesOrderPayment
      tags:
        - SalesOrder
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of SalesOrderPayment by SalesOrderPaymentFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPaymentFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sales-order-app/gen/sales-order/api/SalesOrder/SalesOrderPaymentService.ts/search:
    post:
      summary: Search SalesOrderPayment by SalesOrderPaymentFilterOptions
      tags:
        - SalesOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalesOrderPaymentFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/SalesOrderPayment'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Country:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 100
    CountryFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    City:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 100
        Country:
          type: integer
          format: int32
    CityFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Name", "Country"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Country"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Customer:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 100
        Country:
          type: integer
          format: int32
        City:
          type: integer
          format: int32
        Address:
          type: string
          minLength: 0
          maxLength: 100
    CustomerFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Address:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Country:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                City:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Address:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                City:
                Address:
                  type: string
                  minLength: 0
                  maxLength: 100
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
                City:
                  type: integer
                  format: int32
                Address:
                  type: string
                  minLength: 0
                  maxLength: 100
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
                City:
                  type: integer
                  format: int32
                Address:
                  type: string
                  minLength: 0
                  maxLength: 100
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
                City:
                  type: integer
                  format: int32
                Address:
                  type: string
                  minLength: 0
                  maxLength: 100
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Country:
                  type: integer
                  format: int32
                City:
                  type: integer
                  format: int32
                Address:
                  type: string
                  minLength: 0
                  maxLength: 100
        $select:
          type: array
          example: ["Id", "Name", "Country", "City", "Address"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Country,City,Address"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    CustomerPayment:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 100
        Customer:
          type: integer
          format: int32
        Amount:
          type: number
          format: double
    CustomerPaymentFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Customer:
                Amount:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Customer:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Customer:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Customer:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                Customer:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "Name", "Customer", "Amount"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,Customer,Amount"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Product:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 100
        UoM:
          type: integer
          format: int32
        Price:
          type: number
          format: double
    ProductFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                UoM:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 100
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 100
                UoM:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                UoM:
                Price:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 100
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "Name", "UoM", "Price"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name,UoM,Price"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    UoM:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 50
    UoMFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 50
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 50
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 50
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 50
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrder:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Customer:
          type: integer
          format: int32
        Date:
    SalesOrderFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Date:
                  oneOf:
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Date:
                  oneOf:
            contains:
              type: object
              properties:
                Id:
                Customer:
                Date:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                Date:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                Date:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                Date:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                Date:
        $select:
          type: array
          example: ["Id", "Customer", "Date"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Customer,Date"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderItem:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        SalesOrder:
          type: integer
          format: int32
        Product:
          type: integer
          format: int32
        UoM:
          type: integer
          format: int32
        Price:
          type: number
          format: double
    SalesOrderItemFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UoM:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Product:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                UoM:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Price:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                SalesOrder:
                Product:
                UoM:
                Price:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Product:
                  type: integer
                  format: int32
                UoM:
                  type: integer
                  format: int32
                Price:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "SalesOrder", "Product", "UoM", "Price"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,SalesOrder,Product,UoM,Price"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    SalesOrderPayment:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        SalesOrder:
          type: integer
          format: int32
        Customer:
          type: integer
          format: int32
        CustomerPayment:
          type: integer
          format: int32
        Amount:
          type: number
          format: double
    SalesOrderPaymentFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CustomerPayment:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                SalesOrder:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Customer:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                CustomerPayment:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Amount:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
            contains:
              type: object
              properties:
                Id:
                SalesOrder:
                Customer:
                CustomerPayment:
                Amount:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                CustomerPayment:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                CustomerPayment:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                CustomerPayment:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                SalesOrder:
                  type: integer
                  format: int32
                Customer:
                  type: integer
                  format: int32
                CustomerPayment:
                  type: integer
                  format: int32
                Amount:
                  type: number
                  format: double
        $select:
          type: array
          example: ["Id", "SalesOrder", "Customer", "CustomerPayment", "Amount"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,SalesOrder,Customer,CustomerPayment,Amount"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string